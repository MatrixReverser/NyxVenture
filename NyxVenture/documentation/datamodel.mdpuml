@startuml

abstract ModelBase {	    
	+ IsObjectChanged : bool
	+ ModelChanged : event BubbleChangeEventHander? 
    + PropertyChanged : event PropertyChangedEventHandler?
	+ CleanChangedFlags() : void
	# OnModelChanged(args : BubbleChangeEventArgs) : void
	# OnPropertyChanged(propertyName : string) : void
	# RegisterSubnode(node : ModelBase) : void
	# SetProperty<T>(property : ref T?, value : T?, propertyName = "" : [CallerMemberName] string) : void
	# UnregisterSubnode(node : ModelBase) : void
}

class Game {
	+ Author : string
	+ Chapter? StartChapter
	+ CharacterTypes : CharacterType[]
	+ Description : string
	+ Features : Feature[]
	+ Genre : string
	+ Skills : Skill[]
	+ Title : string		
	+ AddCharacterType(characterType : CharacterType) : void
	+ AddFeature(feature : Feature) : void
	+ AddSkill(skill : Skill) : void
	+ CreateCharacterType() : CharacterType
	+ CreateFeature() : Feature
	+ CreateSkill() : Skill
	+ RemoveCharacterType(characterType : CharacterType) : void
	+ RemoveFeature(feature : Feature) : void
	+ RemoveSkill(skill : Skill) : void
	+ RemoveStartChapter() : void
	+ SetStartChapter(startChapter : Chapter?) : void
}

class Chapter {
	+ Name : string
	+ Text : string
}

class Feature {
	+ Description : string
	+ MaxValue : int
	+ MinValue : int
	+ Name : string	
}

class Skill {
	+ Description : string
	+ MaxValue : int
	+ MinValue : int
	+ Name : string	
}

class BubbleChangeEventArgs {
	+ PathInformation : List<ModelBase>
	+ PropertyInformation : PropertyChangeEventArgs
	+ BubbleChangeEventArgs(propertyInformation : PropertyChangedEventArgs, origin : ModelBase)
	+ AddNodeToPath(node : ModelBase) : void
}

class BubbleChangeEventHandler <<delegate>> {
	+ BubbleChangeEventHander(bubbleChangeEvent : BubbleChangeEventArgs) : delegate void
}

class CharacterType {
	+ BaseFeaturePoints : KeyValuePair<Feature, int>[]
	+ BaseSkillPoints : KeyValuePair<Skill, int>[]
	+ Description : string
	+ Name : string
	+ GetBaseFeaturePoint(feature : Feature) : int
	+ GetBaseSkillPoint(skill : Skill) : int
	+ RemoveBaseFeaturePoint(feature : feature) : void
	+ RemoveBaseSkillPoint(skill : SKill) : void
	+ SetBaseFeaturePoint(feature : Feature, points : int) : void
	+ SetBaseSkillPoint(skill : Skill, points : int) : void
}


BubbleChangeEventArgs "1" <-- BubbleChangeEventHandler : reports
BubbleChangeEventHandler "1" <-- ModelBase : provides
Chapter "1" <--o Game : has
CharacterType "1..*" <--o Game : has
Feature "0..*" <--o Game : has
Feature "0..*" <-- CharacterType : assigns base points to
ModelBase <|-- Game
ModelBase <|-- Feature
ModelBase <|-- Skill
ModelBase <|-- Chapter
ModelBase <|-- CharacterType
Skill "0..*" <--o Game : has
Skill "0..*" <-- CharacterType : assigns base points to

note "ModelBase is the base class of all other model classes.\nIt provides handling of PropertyChangedEvents and\nthe handling of RoutedPropertyChanged events." as Note_ModelBase
Note_ModelBase ..> ModelBase

@enduml

