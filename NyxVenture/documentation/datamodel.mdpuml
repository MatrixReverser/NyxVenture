@startuml

abstract ModelBase {	    
	+ IsObjectChanged : bool
	+ ModelChanged : event BubbleChangeEventHander? 
    + PropertyChanged : event PropertyChangedEventHandler?
	+ void CleanChangedFlags()
	# void OnPropertyChanged(string propertyName)
	# void SetProperty<T>(ref T? property, T? value, [CallerMemberName] string propertyName = "")	
}

class Game {
	+ Author : string
	+ Chapter? StartChapter
	+ Description : string
	+ Features : Feature[]
	+ Genre : string
	+ Title : string					
	+ void AddFeature(Feature feature)
	+ void RemoveFeature(Feature feature)
}

class Chapter {
	+ Name : string
	+ Text : string
}

class Feature {
	+ Description : string
	+ MaxValue : int
	+ MinValue : int
	+ Name : string	
}

class BubbleChangeEventArgs {
	+ PathInformation : List<ModelBase>
	+ PropertyInformation : PropertyChangeEventArgs
	+ BubbleChangeEventArgs(PropertyChangedEventArgs propertyInformation, ModelBase origin)
	+ void AddNodeToPath(ModelBase node)
}

class BubbleChangeEventHandler <<delegate>> {
	+ void BubbleChangeEventHander(BubbleChangeEventArgs bubbleChangeEvent)
}



Chapter "1" <-- Game : has
Feature "0..*" <-- Game : has
ModelBase <|-- Game
ModelBase <|-- Feature
ModelBase <|-- Chapter
BubbleChangeEventArgs "1" <-- BubbleChangeEventHandler : reports
BubbleChangeEventHandler "1" <-- ModelBase : provides

note "ModelBase is the base class of all other model classes.\nIt provides handling of PropertyChangedEvents and\nthe handling of RoutedPropertyChanged events." as Note_ModelBase
Note_ModelBase ..> ModelBase

@enduml

